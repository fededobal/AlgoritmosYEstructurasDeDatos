6.- Aplique el algoritmo BuildHeap, para construir una min-heap en tiempo lineal, con los siguientes valores.
    v = {150, 80, 40, 10, 70, 110, 30, 120, 140, 60, 50, 130, 100, 20, 90}

Res.:
    Árbol:
                            150
              /                           \
           80                             40
        /      \                       /       \
      10       70                  110          30
     /  \     /   \               /   \        /   \
    120 140  60   50             130 100      20  90


    tamaño = 15

    i = (tamaño(v) / 2) = 7
    Filtrado hacia abajo en el elemento v[i] = v[7] = [30]:
                            150
              /                           \
           80                             40
        /      \                       /       \
      10       70                  110          20
     /  \     /   \               /   \        /   \
    120 140  60   50             130 100     [30]  90
    v = {150, 80, 40, 10, 70, 110, 20, 120, 140, 60, 50, 130, 100, [30], 90}

    (i - 1) = 6
    Filtrado hacia abajo en el elemento v[i] = v[6] = [110]:
                            150
              /                           \
           80                             40
        /      \                       /       \
      10       70                  100          20
     /  \     /   \               /   \        /   \
    120 140  60   50             130 [110]      30  90
    v = {150, 80, 40, 10, 70, 100, 20, 120, 140, 60, 50, 130, [110], 30, 90}

    (i - 1) = 5
    Filtrado hacia abajo en el elemento v[i] = v[5] = [70]:
                            150
              /                           \
           80                             40
        /      \                       /       \
      10       50                  100          20
     /  \     /   \               /   \        /   \
    120 140  60 [70]             130  110      30  90
    v = {150, 80, 40, 10, 50, 100, 20, 120, 140, 60, [70], 130, 110, 30, 90}

    (i - 1) = 4
    Filtrado hacia abajo en el elemento v[i] = v[4] = [10]:
                            150
              /                           \
           80                             40
        /      \                       /       \
     [10]       50                  100          20
     /  \     /   \               /   \        /   \
    120 140  60   70             130  110      30  90
    v = {150, 80, 40, [10], 50, 100, 20, 120, 140, 60, 70, 130, 110, 30, 90}

    (i - 1) = 3
    Filtrado hacia abajo en el elemento v[i] = v[3] = [40]:
                            150
              /                           \
           80                             20
        /      \                       /       \
      10       50                  100          30
     /  \     /   \               /   \        /   \
    120 140  60   70             130  110    [40]  90
    v = {150, 80, 20, 10, 50, 100, 30, 120, 140, 60, 70, 130, 110, [40], 90}

    (i - 1) = 2
    Filtrado hacia abajo en el elemento v[i] = v[2] = [80]:
                            150
              /                           \
            10                            20
        /      \                       /       \
      [80]     50                  100          30
     /  \     /   \               /   \        /   \
    120 140  60   70             130  110      40  90
    v = {150, 10, 20, [80], 50, 100, 30, 120, 140, 60, 70, 130, 110, 40, 90}

    (i - 1) = 1
    Filtrado hacia abajo en el elemento v[i] = v[1] = [150]:
                            10
              /                           \
            50                            20
        /      \                       /       \
       80      60                  100          30
     /  \     /   \               /   \        /   \
    120 140 [150] 70             130  110      40  90
    v = {10, 50, 20, 80, 60, 100, 30, 120, 140, [150], 70, 130, 110, 40, 90}